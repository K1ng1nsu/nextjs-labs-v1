default => SSG



// CSR - Client Side Rendering
"use client" => client side Rendering -> 기존 리액트


// SSG - Static Site Generation    
    - ISR(Incremental Static Regeneration) 
    - ISR을 통해 예를 들어 60초 주기로 HTML을 재빌드할 수 있음

// SSG + ISR 
  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
    next: { 
      revalidate: 10  // isr 간격 초 단위 - 다시 접속이 있을 때 비로소 갱신이 발생합니다.
    },
  });



// SSR - Server Side Rendering
  const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
    cache: 'no-store', // 매 요청마다 서버에서 fetch
  });



  App Router에서는 getStaticProps, getServerSideProps 등의 함수는 더 이상 사용하지 않습니다.
대신, "어디에서 어떤 코드를 쓰는가"와 'use client' 선언 유무로 렌더링 방식이 자동으로 결정됩니다.
📌 렌더링 방식 구분 요약
렌더링 방식	적용 대상	특징
서버 컴포넌트 (RSC)	기본 상태 (파일에 'use client' 없음)	서버에서 HTML 생성 (SSR + Streaming)
클라이언트 컴포넌트	'use client' 선언된 파일	클라이언트에서 실행 (CSR)
CSR + RSC 혼합	서버 컴포넌트에서 클라이언트 컴포넌트 포함	인터랙티브 요소만 CSR로 분리 가능
SSG/ISR/SSR	자동 적용 (특정 fetch 전략 사용 시)	fetch, cache, revalidate 속성으로 제어
📘 1. 서버 컴포넌트 (app/page.tsx, app/layout.tsx, etc.)

// app/page.tsx
export default async function Page() {
  const res = await fetch('https://api.example.com/data', {
    cache: 'no-store',        // SSR
    // cache: 'force-cache',  // SSG
    // next: { revalidate: 60 } // ISR
  });

  const data = await res.json();

  return <div>{data.title}</div>;
}

✔ 자동 렌더링 제어
옵션	설명
cache: 'force-cache'	SSG (기본값, 정적 캐싱)
cache: 'no-store'	SSR (매 요청마다 새로 fetch)
next: { revalidate: 60 }	ISR (60초마다 백그라운드 생성)
📘 2. 클라이언트 컴포넌트

// app/components/Counter.tsx
'use client';

import { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  return <button onClick={() => setCount(count + 1)}>{count}</button>;
}

✅ 특징

    React Hooks 사용 가능 (useState, useEffect, 등)

    렌더링은 클라이언트에서만 수행됨

    서버에서는 절대 실행되지 않음

📘 3. 클라이언트 컴포넌트를 서버 컴포넌트에 포함하기

// app/page.tsx
import Counter from './components/Counter';

export default async function Page() {
  return (
    <main>
      <h1>Hello!</h1>
      <Counter /> {/* 클라이언트 컴포넌트 */}
    </main>
  );
}

서버에서 전체 HTML을 생성한 후, 클라이언트 컴포넌트는 hydration되어 브라우저에서 작동합니다.
✅ 요약
파일 위치/구조	렌더링 방식	설명
app/page.tsx (async 함수)	서버 컴포넌트	기본값, SSR 또는 SSG/ISR
'use client' 있는 컴포넌트	클라이언트 컴포넌트	CSR 전용
fetch() + cache 옵션	SSR/SSG/ISR 조절	revalidate, no-store로 제어